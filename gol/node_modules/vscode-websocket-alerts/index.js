const WebSocket = require('ws');
const { spawnSync } = require('child_process');
const path = require('path');
const fs = require('fs');

const serverUrl = 'ws://localhost:8121';

// Helper for alert function
function createWebSocket() {
    let ws = new WebSocket(serverUrl);

    return new Promise((resolve, reject) => {
        ws.on('open', () => {
            resolve(ws);
        });

        ws.on('error', (error) => {
            console.error('WebSocket error:', error);
            reject(error);
        });
    });
}

// Exported alert function for showing alerts
function alert(message) {
    const helperScript = `
        const WebSocket = require('ws');
        
        const ws = new WebSocket('${serverUrl}');
        
        let message = ${JSON.stringify(message)};
        if (typeof message === 'object') {
            message = JSON.stringify(message);
        }
        message = String(message);
        
        const alertMessage = { 
            command: 'extension.showAlert', 
            args: { message } 
        };

        ws.on('open', () => {
            ws.send(JSON.stringify(alertMessage));
            setTimeout(() => {
                ws.close();
                process.exit(0);
            }, 100);
        });
    `;

    const tmpFile = path.join(__dirname, '_temp_alert_helper.js');
    fs.writeFileSync(tmpFile, helperScript);

    try {
        spawnSync('node', [tmpFile], {
            encoding: 'utf-8'
        });
    } finally {
        fs.unlinkSync(tmpFile);
    }
}

// Exported prompt function for showing prompts
function prompt(promptText) {
    const helperScript = `
        const WebSocket = require('ws');
        
        const ws = new WebSocket('${serverUrl}');
        
        const promptMessage = {
            command: 'extension.showPrompt',
            args: { promptText: ${JSON.stringify(promptText)} },
        };

        ws.on('open', () => {
            ws.send(JSON.stringify(promptMessage));
        });

        ws.on('message', (message) => {
            console.log(message.toString());
            ws.close();
            process.exit(0);
        });
    `;

    const tmpFile = path.join(__dirname, '_temp_prompt_helper.js');
    fs.writeFileSync(tmpFile, helperScript);

    try {
        const result = spawnSync('node', [tmpFile], {
            encoding: 'utf-8'
        });

        // Parse the response
        let response;
        try {
            response = JSON.parse(result.stdout.trim());
        } catch (e) {
            response = result.stdout.trim();
        }

        return response;
    } finally {
        fs.unlinkSync(tmpFile);
    }
}

module.exports = {
    alert,
    prompt
};
