//Grass.js
import { LivingCreature } from './LivingCreature.js';
import { Empty } from './Empty.js';
import { random, findNeighbourPositions, updateCreaturePosition } from '../utils.js';
import { matrix } from '../script.js';

class Grass extends LivingCreature {
    constructor() {
        super("green", Math.floor(Math.random() * 3)); // Setzt die Farbe auf grün und die Energie auf einen zufälligen Wert zwischen 0 und 2
    }

    step() {
        this.energy++;

        // Wenn das Gras 7 Energie hat, multipliziere und setze die Energie zurück
        if (this.energy >= 7) {
            this.multiply();
            this.energy = 0;
        }
    }

    multiply() {
        let emptyFields = findNeighbourPositions(this.row, this.col, 1, Empty);
        if (emptyFields.length > 0) {
            let randomEmptyField = emptyFields[Math.floor(Math.random() * emptyFields.length)];
            let row = randomEmptyField[0];
            let col = randomEmptyField[1];
            matrix[row][col] = new Grass();
        }
    }
}

export { Grass };

//Empty.js
// Empty.js - Diese Klasse dient als Platzhalter für leere Felder in der Matrix.

class Empty {
    constructor() {
    
    }
}

export { Empty }; // Exportiere die Klasse, damit sie in anderen Dateien importiert werden kann

//GrassEater.js
import { LivingCreature } from './LivingCreature.js';
import { Grass } from './Grass.js';
import { Empty } from './Empty.js';
import { findNeighbourPositions } from '../utils.js';
import { matrix } from '../script.js';
import { updateCreaturePosition } from '../utils.js';

class GrassEater extends LivingCreature {
    constructor() {
        super("yellow", 5); // Setzt die Farbe auf gelb und die Anfangsenergie auf 5
    }

    step() {
        this.trytoEat();
        if (this.energy >= 10) {
            this.multiply();
            this.energy -= 7;
        } else if (this.energy <= 0) {
            matrix[this.row][this.col] = new Empty();
        }
    }

    trytoEat() {
        // Suche nach Gras in der Umgebung
        let grassFields = findNeighbourPositions(this.row, this.col, 1, Grass);
        if (grassFields.length > 0) {
            let randomGrassField = grassFields[Math.floor(Math.random() * grassFields.length)];
            updateCreaturePosition(this, randomGrassField); // Bewege den Grasfresser auf das Gras
            this.energy++; // Grasfresser gewinnt Energie
        } else {
            let emptyFields = findNeighbourPositions(this.row, this.col, 1, Empty);
            if (emptyFields.length > 0) {
                let randomEmptyField = emptyFields[Math.floor(Math.random() * emptyFields.length)];
                updateCreaturePosition(this, randomEmptyField); // Bewege den Grasfresser auf ein leeres Feld
            }
            this.energy--; // Wenn kein Gras gefunden wird, verliert der Grasfresser Energie
        }
    }

    multiply() {
        let freeFields = findNeighbourPositions(this.row, this.col, 1, Empty);
        if (freeFields.length > 0) {
            let randomFreeField = freeFields[Math.floor(Math.random() * freeFields.length)];
            let row = randomFreeField[0];
            let col = randomFreeField[1];
            matrix[row][col] = new GrassEater(); // Erstelle einen neuen Grasfresser
        }
    }
}

export { GrassEater };

//MeatEater.js
// MeatEater.js - Fleischfresser-Klasse
import { LivingCreature } from './LivingCreature.js';
import { Grass } from './Grass.js';
import { GrassEater } from './GrassEater.js';
import { Empty } from './Empty.js';
import { matrix } from '../script.js';

import { updateCreaturePosition, findNeighbourPositions, random } from '../utils.js';

export class MeatEater extends LivingCreature {
    constructor() {
        super("red", 100);
    }

    step() {
        this.trytoEat();
        if (this.energy >= 120) {
            this.multiply();
            this.energy -= 100;
        } else if (this.energy <= 0) {
            matrix[this.row][this.col] = new Empty();
        }
    }

    trytoEat() {
        let preyFields = findNeighbourPositions(this.row, this.col, 1, GrassEater);
        if (preyFields.length > 0) {
            let randomGrassField = random(preyFields);
            updateCreaturePosition(this, randomGrassField);
            this.energy += 10;
        } else {
            this.energy--;
        }
    }

    multiply() {
        let freeFields = findNeighbourPositions(this.row, this.col, 1, Empty);
        if (freeFields.length > 0) {
            let randomFreeField = random(freeFields);
            let row = randomFreeField[0];
            let col = randomFreeField[1];
            matrix[row][col] = new MeatEater();
        }
    }
}



//LivingCreature.js
import { matrix } from "../script.js";
import { frameCount } from "../script.js";


class LivingCreature {
    constructor(color, energy) {
        this.stepCount = frameCount + 1;
        this.color = color; // Jede Kreatur braucht eine Farbe
        this.energy = energy; // Jede Kreatur braucht Energie
    }

    multiply(newCreatureClass, energyCost) {
        let emptyFields = findNeighbourPositions(this.row, this.col, 1, Empty);
        if (emptyFields.length > 0) {
            let randomEmptyField = emptyFields[Math.floor(Math.random() * emptyFields.length)];
            let row = randomEmptyField[0];
            let col = randomEmptyField[1];
            matrix[row][col] = new newCreatureClass(); // Erstelle eine neue Kreatur
            this.energy = energyCost; // Setze die Energie der Kreatur auf den angegebenen Wert
        }
    }
}

export { LivingCreature };

//matrix.js
// matrix.js

import { Empty } from './Lebewesen/Empty.js';
import { matrix } from './script.js';
import { getRandomCreature } from './utils.js';  // Importiere die Funktion aus utils.js

// Funktion zum zufälligen Auffüllen der Matrix mit Kreaturen
export function createAndFillMatrix(matrixSize, creatureProbabilities) {
    let matrix = [];
    for (let i = 0; i < matrixSize; i++) {
        matrix.push([]);
        for (let j = 0; j < matrixSize; j++) {
            matrix[i][j] = getRandomCreature(creatureProbabilities);
        }
    }
    return matrix;
}


export function getTransformedMatrix(){
    return matrix.map(row => row.map(elem => elem.color || "white"))
}

//utils.js
import { Empty } from './Lebewesen/Empty.js';
import { matrix, matrixSize } from './script.js';

// Utility-Funktionen, die von anderen Dateien importiert werden können

// Zufallsgenerator für ein Element aus einem Array
export function random(array) {
    return array[Math.floor(Math.random() * array.length)];
}

// Sucht die benachbarten Positionen eines bestimmten Kreaturentypen
// Gibt eine Liste von [row, col]-Positionen zurück
export function findNeighbourPositions(row, col, distance, creatureType) {
    let positions = [];
    for (let i = row - distance; i <= row + distance; i++) {
        for (let j = col - distance; j <= col + distance; j++) {
            let istInMatrix = i >= 0 && j >= 0 && i < matrixSize && j < matrixSize;

            if (istInMatrix && (i != row || j != col) && matrix[i][j] instanceof creatureType) {
                positions.push([i, j]);
            }
        }
    }
    return positions;
}

// Aktualisiert die Position einer Kreatur in der Matrix
export function updateCreaturePosition(creature, newPos) {
    if (matrix[creature.row][creature.col] !== creature) {
        let creatureType = creature.constructor.name;
        let message = `Ein ${creatureType}-Kreatur soll bewegt werden, aber befindet sich nicht mehr in der Matrix.`;
        throw new Error(message);
    }
    let newRow = newPos[0];
    let newCol = newPos[1];
    matrix[newRow][newCol] = creature;
    matrix[creature.row][creature.col] = new Empty();
    creature.row = newRow;
    creature.col = newCol;
}

// Funktion, um ein zufälliges Lebewesen basierend auf den Wahrscheinlichkeiten auszuwählen
export function getRandomCreature(creatureProbabilities) {
    let rand = Math.random(); // Zufallszahl zwischen 0 und 1
    let sum = 0;
    for (let i = 0; i < creatureProbabilities.length; i++) {
        let creatureClass = creatureProbabilities[i][0];
        let probability = creatureProbabilities[i][1];
        sum += probability; // Summiert die Wahrscheinlichkeiten
        if (rand < sum) {
            return new creatureClass();
        }
    }
    return new Empty(); // Wenn keine andere Bedingung zutrifft, wird ein leeres Feld zurückgegeben
}

// Funktion zum zufälligen Auffüllen der Matrix mit Kreaturen
export function fillRandomMatrix(matrixSize, creatureProbabilities) {
    matrix.splice(0, matrix.length)
    for (let i = 0; i < matrixSize; i++) {
        matrix.push([]);
        for (let j = 0; j < matrixSize; j++) {
            matrix[i][j] = getRandomCreature(creatureProbabilities);
        }
    }
}

//script.js HAUPTCODE
// Importiere die Kreaturen-Klassen aus dem "Lebewesen"-Unterordner
import { Grass } from './Lebewesen/Grass.js';
import { GrassEater } from './Lebewesen/GrassEater.js';
import { MeatEater } from './Lebewesen/MeatEater.js';
import { Empty } from './Lebewesen/Empty.js';


// Importiere die Utility-Funktionen aus der utils.js Datei
import { createAndFillMatrix } from './matrix.js';  // Matrix-Erstellungsfunktion importieren

// Größe der Matrix (Anzahl der Zellen in Breite und Höhe)
export let matrixSize = 50;

// Wahrscheinlichkeit, mit der jede Kreatur erstellt wird
let creatureProbabilities = [
    [Grass, 0.25],    // Gras: 25% Wahrscheinlichkeit
    [GrassEater, 0.05],  // Grasfresser: 5% Wahrscheinlichkeit
    [MeatEater, 0.02],  // Fleischfresser: 2% Wahrscheinlichkeit
];



// Initialisierung der Matrix
export let matrix;

let spielzustand = [matrix]; //  2D Array
function collectStatistics(spielzustand, frameCounter) {
    let lebendeZellen = 0;
    let toteZellen = 0;

    for (let i = 0; i < spielzustand.length; i++) {
        for (let j = 0; j < spielzustand[i].length; j++) {
            if (spielzustand[i][j] === 1) {
                lebendeZellen++;
            } else {
                toteZellen++;
            }
        }
    }

    return {
        lebendeZellen,
        toteZellen,
        frame: frameCounter
    
    };
}

let frameCounter = 0;

//--------//

function spielSchleife() {
    frameCounter++;
    
    // Sammle die Statistik
    const statistik = collectStatistics(spielzustand, frameCounter);
    
    // Alle 60 Frames an den Server senden
    if (frameCounter % 60 === 0) {
        sendtoserver(statistik);
    }
}

// Beispielhafte Spielschleife mit `requestAnimationFrame` (echtzeit-Frames)
function loop() {
    spielSchleife();
    requestAnimationFrame(loop); // Wiederhole die Schleife
}

loop(); // Starte die Schleife

function sendtoserver(statistik) {
    fetch('http://deinserver.de/api/statistik', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(statistik)
    })
    .then(response => response.json())
    .then(data => console.log('Erfolgreich gesendet:', data))
    .catch((error) => console.error('Fehler beim Senden:', error));
}

// Frame-Count für das Tracking der Frames
export let frameCount = 0;

// Setup-Funktion wird einmal zu Beginn ausgeführt
export function setup() {
    matrix = createAndFillMatrix(matrixSize, creatureProbabilities);
    // Hier entfernen wir `createCanvas()` und machen es mit reinem HTML
    // Canvas und Kontext sind bereits oben definiert.
}


// Draw-Funktion wird in jedem Frame aufgerufen
export function draw() {
   
    for (let row = 0; row < matrixSize; row++) {
        for (let col = 0; col < matrixSize; col++) {
            let obj = matrix[row][col]; // Objekt an der aktuellen Position
            
            // Leere Zellen überspringen
            if (obj instanceof Empty) continue;
            
            // Zeile und Spalte der Kreatur setzen
            obj.row = row;
            obj.col = col;
            
            // Verhindert, dass neu erstellte Kreaturen im gleichen Schritt aktualisiert werden
            if (obj.stepCount === frameCount) {
                obj.step(); // Kreatur führt ihren Schritt aus
                obj.stepCount++; // Erhöhe den Step-Zähler
            }
        }
    }
    frameCount++;
}
